import net.simno.dmach.Libs
import net.simno.dmach.Versions
import com.github.triplet.gradle.androidpublisher.ResolutionStrategy

plugins {
    id 'com.android.application'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
    id 'dagger.hilt.android.plugin'
    id 'com.github.triplet.play'
}

kapt {
    correctErrorTypes true
    useBuildCache true
}

play {
    track.set('internal')
    resolutionStrategy.set(ResolutionStrategy.IGNORE)
    defaultToAppBundles.set(true)
    serviceAccountCredentials.set(rootProject.file('signing/play-account.json'))
}

Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}

android {
    compileSdkVersion Versions.compileSdk
    ndkVersion Versions.ndk
    defaultConfig {
        applicationId 'net.simno.dmach'
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk
        versionCode 20009
        versionName '2.0'
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        viewBinding true
    }
    signingConfigs {
        release {
            storeFile rootProject.file('signing/app-upload.jks')
            storePassword propOrDef('STORE_PASSWORD', "")
            keyAlias propOrDef('KEY_ALIAS', "")
            keyPassword propOrDef('KEY_PASSWORD', "")
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/proguard/*'
        exclude 'META-INF/*.version'
        exclude 'META-INF/*.properties'
        exclude '/*.properties'
    }
    compileOptions {
        sourceCompatibility Versions.java
        targetCompatibility Versions.java
    }
    testOptions {
        unitTests {
            includeAndroidResources true
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        androidTest.assets.srcDirs += files("$projectDir/databases".toString())
    }
}

dependencies {
    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.serializationRuntime
    implementation Libs.Coroutines.android
    implementation Libs.Coroutines.core

    implementation Libs.AndroidX.activity
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.constraintlayout
    implementation Libs.AndroidX.core
    implementation Libs.AndroidX.dynamicanimation
    implementation Libs.AndroidX.fragment
    implementation Libs.AndroidX.Hilt.viewmodel
    kapt Libs.AndroidX.Hilt.compiler
    implementation Libs.AndroidX.Lifecycle.livedata
    implementation Libs.AndroidX.Lifecycle.runtime
    implementation Libs.AndroidX.Lifecycle.viewmodelKtx
    implementation Libs.AndroidX.Lifecycle.viewmodelState
    implementation Libs.AndroidX.Paging.runtime
    implementation Libs.AndroidX.recyclerview
    implementation Libs.AndroidX.Room.runtime
    implementation Libs.AndroidX.Room.common
    implementation Libs.AndroidX.Room.ktx
    kapt Libs.AndroidX.Room.compiler

    implementation Libs.Google.Hilt.android
    kapt Libs.Google.Hilt.compiler
    implementation Libs.Google.ossLicensesLibrary

    implementation Libs.insetter
    implementation Libs.dmachExternals
    implementation Libs.kortholt

    implementation Libs.LeakCanary.plumber
    debugImplementation Libs.LeakCanary.leakcanary

    androidTestImplementation Libs.AndroidX.Room.testing
    androidTestImplementation Libs.AndroidX.Test.junit
    androidTestImplementation Libs.AndroidX.Test.espresso
    androidTestImplementation Libs.Google.truth

    testImplementation Libs.AndroidX.Test.core
    testImplementation Libs.AndroidX.Test.junit
    testImplementation Libs.AndroidX.Test.runner
    testImplementation Libs.AndroidX.Paging.common
    testImplementation Libs.junit
    testImplementation Libs.mockito
    testImplementation Libs.robolectric
    testImplementation Libs.Google.truth
}
